## env
fps: 10

env:
  name: mujoco_sim
  task: point_mass_reach-v0
  image_size: 64
  state_dim: 2
  action_dim: 2
  fps: ${fps}
  episode_length: 50

## policy & training


seed: 2024
dataset_repo_id: point_mass_reach/v2

override_dataset_stats:
  observation.images.Camera_rgb_image:
    # stats from imagenet, since we use a pretrained vision model
    mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
    std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)


training:
  offline_steps: 100000
  online_steps: 0
  eval_freq: 1000
  save_freq: 25000
  log_freq: 200
  save_checkpoint: false

  batch_size: 64
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.images.Camera_rgb_image: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"

  # The original implementation doesn't sample frames for the last 7 steps,
  # which avoids excessive padding and leads to improved training results.
  drop_n_last_frames: 2  # ${policy.horizon} - ${policy.n_action_steps} - ${policy.n_obs_steps} + 1


  # Number of workers for the offline training dataloader.
  num_workers: 4


  # Checkpoint is saved every `save_freq` training iterations and after the last training step.

  # Online training. Note that the online training loop adopts most of the options above apart from the
  # dataloader options. Unless otherwise specified.
  # The online training look looks something like:
  #
  # for i in range(online_steps):
  #     do_online_rollout_and_update_online_buffer()
  #     for j in range(online_steps_between_rollouts):
  #         batch = next(dataloader_with_offline_and_online_data)
  #         loss = policy(batch)
  #         loss.backward()
  #         optimizer.step()
  #
  # How many episodes to collect at once when we reach the online rollout part of the training loop.
  online_rollout_n_episodes: 1
  # The number of environments to use in the gym.vector.VectorEnv. This ends up also being the batch size for
  # the policy. Ideally you should set this to by an even divisor or online_rollout_n_episodes.
  online_rollout_batch_size: 1
  # How many optimization steps (forward, backward, optimizer step) to do between running rollouts.
  # The proportion of online samples (vs offline samples) to include in the online training batches.
  online_sampling_ratio: 0.5
  # First seed to use for the online rollout environment. Seeds for subsequent rollouts are incremented by 1.
  online_env_seed: null
  # Sets the maximum number of frames that are stored in the online buffer for online training. The buffer is
  # FIFO.
  online_buffer_capacity: null
  # The minimum number of frames to have in the online buffer before commencing online training.
  # If online_buffer_seed_size > online_rollout_n_episodes, the rollout will be run multiple times until the
  # seed size condition is satisfied.
  online_buffer_seed_size: 0
  # Whether to run the online rollouts asynchronously. This means we can run the online training steps in
  # parallel with the rollouts. This might be advised if your GPU has the bandwidth to handle training
  # + eval + environment rendering simultaneously.
  do_online_rollout_async: false

  image_transforms:
  # These transforms are all using standard torchvision.transforms.v2
  # You can find out how these transformations affect images here:
  # https://pytorch.org/vision/0.18/auto_examples/transforms/plot_transforms_illustrations.html
  # We use a custom RandomSubsetApply container to sample them.
  # For each transform, the following parameters are available:
  #   weight: This represents the multinomial probability (with no replacement)
  #           used for sampling the transform. If the sum of the weights is not 1,
  #           they will be normalized.
  #   min_max: Lower & upper bound respectively used for sampling the transform's parameter
  #           (following uniform distribution) when it's applied.
    # Set this flag to `true` to enable transforms during training
    enable: false
    # This is the maximum number of transforms (sampled from these below) that will be applied to each frame.
    # It's an integer in the interval [1, number of available transforms].
    max_num_transforms: 3
    # By default, transforms are applied in Torchvision's suggested order (shown below).
    # Set this to True to apply them in a random order.
    random_order: false
    brightness:
      weight: 1
      min_max: [0.8, 1.2]
    contrast:
      weight: 1
      min_max: [0.8, 1.2]
    saturation:
      weight: 1
      min_max: [0.5, 1.5]
    hue:
      weight: 1
      min_max: [-0.05, 0.05]
    sharpness:
      weight: 1
      min_max: [0.8, 1.2]
eval:
  n_episodes: 50
  batch_size: 50
  use_async_envs: false

policy:
  name: diffusion

  # Input / output structure.
  n_obs_steps: 1
  horizon: 8
  n_action_steps: 4

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.Camera_rgb_image: [3, 64,64]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.Camera_rgb_image: mean_std
    observation.state: min_max
  output_normalization_modes:
    action: min_max

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  crop_shape: [64, 64]
  crop_is_random: True
  pretrained_backbone_weights: null
  use_group_norm: True
  spatial_softmax_num_keypoints: 32
  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDPM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: null  # if not provided, defaults to `num_train_timesteps`

  # Loss computation
  do_mask_loss_for_padding: false



hydra:
  run:
    # Set `dir` to where you would like to save all of the run outputs. If you run another training session
    # with the same value for `dir` its contents will be overwritten unless you set `resume` to true.
    dir: outputs/train/${now:%Y-%m-%d}/${now:%H-%M-%S}_${env.name}_${policy.name}_${hydra.job.name}
  job:
    name: default

# Set `resume` to true to resume a previous run. In order for this to work, you will need to make sure
# `hydra.run.dir` is the directory of an existing run with at least one checkpoint in it.
# Note that when resuming a run, the default behavior is to use the configuration from the checkpoint,
# regardless of what's provided with the training command at the time of resumption.
resume: false
device: cuda  # cpu
# `use_amp` determines whether to use Automatic Mixed Precision (AMP) for training and evaluation. With AMP,
# automatic gradient scaling is used.
use_amp: false
# `seed` is used for training (eg: model initialization, dataset shuffling)
# AND for the evaluation environments.
# You may provide a list of datasets here. `train.py` creates them all and concatenates them. Note: only data
# keys common between the datasets are kept. Each dataset gets and additional transform that inserts the
# "dataset_index" into the returned item. The index mapping is made according to the order in which the
# datsets are provided.
video_backend: pyav


wandb:
  enable: true
  # Set to true to disable saving an artifact despite save_checkpoint == True
  disable_artifact: true
  project: lerobot
  notes: ""



